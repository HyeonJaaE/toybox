{"version":3,"sources":["components/RockSiccorsPaper.tsx","components/Homelanding.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomInt","n","Math","floor","random","RockSiccorsPaper","useState","reset","setReset","userData","setUserData","honesty","choose","done","result","info","setInfo","useEffect","foo","ud","className","onClick","e","target","value","lie","newChoose","res","Homelanding","id","src","href","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94ff467f.chunk.js","sourcesContent":["import React, { useState, useEffect, useDebugValue } from \"react\";\r\n\r\nconst HONEST = 101; // 0 ~ 101 => 0% ~ 100%\r\n\r\nconst getRandomInt = (n: number) => {\r\n    return Math.floor(Math.random() * n);\r\n};\r\n\r\nconst getStatus = (ud: any) => {\r\n    return (\r\n        <div>\r\n            <p>\r\n                {ud[0]} 승 {ud[1]} 무 {ud[2]} 패{\" \"}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RockSiccorsPaper = () => {\r\n    const [reset, setReset] = useState(false);\r\n    const [userData, setUserData] = useState([0, 0, 0]);\r\n    const [info, setInfo] = useState({\r\n        honesty: 0,\r\n        choose: 0,\r\n        done: false,\r\n        result: -1,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setInfo({\r\n            honesty: getRandomInt(HONEST),\r\n            choose: getRandomInt(3),\r\n            done: false,\r\n            result: -1,\r\n        });\r\n    }, [reset]);\r\n\r\n    useEffect(() => {\r\n        //console.log(\"info\", info);\r\n        if (info.result !== -1) {\r\n            var foo = userData;\r\n            foo[info.result] += 1;\r\n            setUserData([...foo]);\r\n        }\r\n    }, [info]);\r\n\r\n    const handleClick = (e: any) => {\r\n        if (!e.target.value) {\r\n            return;\r\n        }\r\n        //console.log(\"내가 낸 것:\", e.target.value);\r\n        var lie = getRandomInt(101),\r\n            newChoose = info.choose,\r\n            res = 0;\r\n\r\n        if (info.honesty >= lie) {\r\n            //lie 가 honesty 보다 낮으면 거짓말\r\n            //console.log(\"거짓말이다\");\r\n            while (info.choose === newChoose) {\r\n                newChoose = getRandomInt(3);\r\n            }\r\n        }\r\n\r\n        switch (e.target.value) {\r\n            case \"r\":\r\n                if (newChoose === 0) res = 1;\r\n                if (newChoose === 1) res = 0;\r\n                if (newChoose === 2) res = 2;\r\n                break;\r\n            case \"s\":\r\n                if (newChoose === 0) res = 2;\r\n                if (newChoose === 1) res = 1;\r\n                if (newChoose === 2) res = 0;\r\n                break;\r\n            case \"p\":\r\n                if (newChoose === 0) res = 0;\r\n                if (newChoose === 1) res = 2;\r\n                if (newChoose === 2) res = 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setInfo({\r\n            honesty: info.honesty,\r\n            choose: newChoose,\r\n            done: true,\r\n            result: res,\r\n        });\r\n    };\r\n\r\n    const rspMsg = [\"나 이번에 바위 낼꺼야~\", \"이번엔 가위 낼거야\", \"보자기 낼거야\"];\r\n    const rsp = [\"바위\", \"가위\", \"보\"];\r\n    const msg = [\"승리\", \"비김\", \"패배\"];\r\n    const bonobono = [\"(⁻∞⁻)\", \"(・∞・)\", \"(❛ ∞ ❛)\"];\r\n    return (\r\n        <div className=\"rsp\">\r\n            <div>\r\n                <h1>보노보노랑 가위바위보하기</h1>\r\n                <p>보노보노가 거짓말 했을 확률 {info.honesty}%</p>\r\n                <h3>\r\n                    {info.done ? (\r\n                        <>\r\n                            {bonobono[info.result]} {rsp[info.choose]}\r\n                        </>\r\n                    ) : (\r\n                        <> (・∞・) :{rspMsg[info.choose]}</>\r\n                    )}\r\n                </h3>\r\n\r\n                {info.done ? (\r\n                    <p>\r\n                        {msg[info.result]}\r\n                        <br />\r\n                        <button onClick={() => setReset(!reset)}>계속</button>\r\n                        <br />\r\n                    </p>\r\n                ) : (\r\n                    <p onClick={handleClick}>\r\n                        나는 무얼 낼까 :\r\n                        <br />\r\n                        <br />\r\n                        <button value=\"r\">바위</button>\r\n                        <button value=\"s\">가위</button>\r\n                        <button value=\"p\">보</button>\r\n                    </p>\r\n                )}\r\n                {getStatus(userData)}\r\n            </div>\r\n            <div>{/*\r\n                <p>(❛∞❛)</p>\r\n                <p>(⁻∞⁻)</p>\r\n               */}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RockSiccorsPaper;\r\n","import * as React from \"react\";\r\nimport \"../style/Homelanding.scss\";\r\n\r\nimport RockSiccorsPaper from \"./RockSiccorsPaper\";\r\nconst Homelanding = () => {\r\n    return (\r\n        <div>\r\n            <div\r\n                id=\"page1\"\r\n                className=\"hl-menu d-flex flex-column justify-content-center align-items-center \"\r\n            >\r\n                <div className=\"row\">\r\n                    <h2>TOYBOX</h2>\r\n                </div>\r\n                <div className=\"hl-main\">\r\n                    <div className=\"icon center\">\r\n                        <img src=\"/toybox/box.png\"></img>\r\n                    </div>\r\n\r\n                    <div className=\"icon sub a\">\r\n                        <a href=\"#page2\">\r\n                            <img src=\"/toybox/rsp.png\"></img>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"icon sub b\">\r\n                        <img src=\"/toybox/logo192.png\"></img>\r\n                    </div>\r\n                    <div className=\"icon sub c\">\r\n                        <img src=\"/toybox/logo192.png\"></img>\r\n                    </div>\r\n                    <div className=\"icon sub d\">\r\n                        <img src=\"/toybox/logo192.png\"></img>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    // <a href=\"/toybox/rsp\">가위바위보 하러가기</a>\r\n                }\r\n            </div>\r\n            <div id=\"page2\" className=\"hl-menu d-flex align-items-center \">\r\n                <div className=\"col-6 text-center text-white mx-auto\">\r\n                    <RockSiccorsPaper />\r\n                </div>\r\n            </div>\r\n            <div id=\"page3\" className=\"hl-menu\">\r\n                <p>page3</p>\r\n            </div>\r\n            <div id=\"sidebar\">\r\n                <ul className=\"p-0 mb-0\">\r\n                    <li>\r\n                        <a href=\"#page1\">\r\n                            <span></span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#page2\">\r\n                            <span></span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#page3\">\r\n                            <span></span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#page4\">\r\n                            <span></span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#page5\">\r\n                            <span></span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div id=\"github\">\r\n                <img src=\"/toybox/github.png\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homelanding;\r\n","import React from \"react\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\n\nimport Homelanding from \"./components/Homelanding\";\nimport RockSiccorsPaper from \"./components/RockSiccorsPaper\";\n\nconst App = () => {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Route exact path=\"/\" component={Homelanding} />\n            <Route path=\"/rsp\" component={RockSiccorsPaper} />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n/*\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\") as HTMLElement\n);\n\nserviceWorker.unregister();\n\n*/\n"],"sourceRoot":""}